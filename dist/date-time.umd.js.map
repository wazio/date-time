{"version":3,"file":"date-time.umd.js","sources":["../src/utils.ts","../src/format-specifier.ts","../src/format-specifiers.ts","../src/time-span.ts","../src/date-time.ts"],"sourcesContent":["/**\r\n * Milliseconds in time units object.\r\n */\r\nexport const msInTimeUnits = {\r\n  day: 86400000,\r\n  hour: 3600000,\r\n  minute: 60000,\r\n  second: 1000,\r\n};\r\n\r\n/**\r\n * Returns string value with enough zeros at the beginning to match expectedLength param.\r\n *\r\n * @param value: number|string\r\n * @param expectedLength: number\r\n * @returns {string}\r\n */\r\nexport function addZeroPrefix(value: number | string, expectedLength: number): string {\r\n  let stringValue: string = value.toString();\r\n  let zeroCount: number = expectedLength - stringValue.length;\r\n  while (zeroCount-- > 0) stringValue = '0' + stringValue;\r\n\r\n  return stringValue;\r\n}\r\n\r\n/**\r\n * For positive number returns largest integer less than or equal to a given number and\r\n * for negative number returns largest integer grater than or equal to a given number\r\n *\r\n * @param value: number\r\n * @returns {number}\r\n */\r\nexport function relativeFloor(value: number): number {\r\n  return sign(value) * Math.floor(Math.abs(value));\r\n}\r\n\r\n/**\r\n * Copy the values of all of the enumerable own properties from one or more source objects to a target object.\r\n * Returns the target object.\r\n * ES6 polyfill.\r\n *\r\n * @param target: object\r\n * @param sources: any[]\r\n * @returns {any}\r\n */\r\nexport function assign(target: object, ...sources: any[]): any {\r\n  sources.forEach(source => {\r\n    Object.keys(source).forEach(key => {\r\n      (target as any)[key] = (source as any)[key];\r\n    });\r\n  });\r\n\r\n  return target as any;\r\n}\r\n\r\n/**\r\n * Returns the sign of the x, indicating whether x is positive, negative or zero.\r\n * ES6 polyfill.\r\n *\r\n * @param x: number\r\n * @returns {number}\r\n */\r\nexport function sign(x: number): 1 | 0 | -1 {\r\n  return x > 0 ? 1 : x < 0 ? -1 : 0;\r\n}\r\n","import { DateBuilderParams } from './date-time';\r\nimport { assign } from './utils';\r\n\r\nexport interface IFormatSpecifierConstructorParams {\r\n  code: string;\r\n  length?: number;\r\n  toDateName?: keyof (DateBuilderParams);\r\n  toDateFn?: IFormatSpecifierToDateFn;\r\n  toValueFn: IFormatSpecifierToValueFn;\r\n}\r\n\r\nexport interface IFormatSpecifierToValueFn {\r\n  (date: Date): string;\r\n}\r\n\r\nexport interface IFormatSpecifierToDateFn {\r\n  (value: any): Partial<DateBuilderParams>;\r\n}\r\n\r\n/**\r\n * FormatSpecifier class\r\n */\r\nexport class FormatSpecifier {\r\n  code: string;\r\n  length: number;\r\n  toDateName: keyof (DateBuilderParams);\r\n  hasReverseAbility: boolean;\r\n\r\n  /**\r\n   * Returns string representation of Date object's value.\r\n   *\r\n   * @param date: Date\r\n   * @returns {string}\r\n   */\r\n  toValueFn: (date: Date) => string;\r\n\r\n  /**\r\n   * Objects created by createInstance static method.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Creates new instance of FormatSpecifier from given params.\r\n   *\r\n   * @param params\r\n   * @returns {FormatSpecifier}\r\n   */\r\n  static createInstance(params: IFormatSpecifierConstructorParams): FormatSpecifier {\r\n    const hasReverseAbility: boolean = !!(params.toDateName || params.toDateFn);\r\n\r\n    return assign(new FormatSpecifier(), params, {\r\n      hasReverseAbility,\r\n      length: hasReverseAbility ? params.length || params.code.length : undefined,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns value converted into DateBuilderParams.\r\n   *\r\n   * @param value: string\r\n   * @returns {Partial<DateBuilderParams>}\r\n   */\r\n  toDateFn(value: string): Partial<DateBuilderParams> {\r\n    const params: Partial<DateBuilderParams> = {};\r\n    params[this.toDateName] = parseInt(value, 10);\r\n\r\n    return params;\r\n  }\r\n}\r\n","import { FormatSpecifier } from './format-specifier';\r\nimport { addZeroPrefix } from './utils';\r\n\r\nexport interface IFormatSpecifiersList {\r\n  [key: string]: FormatSpecifier;\r\n}\r\n\r\n/**\r\n * FormatSpecifiers class\r\n */\r\nexport class FormatSpecifiers {\r\n  /**\r\n   * A list of all available specifiers.\r\n   *\r\n   * @type {IFormatSpecifiersList}\r\n   */\r\n  private static specifiers: IFormatSpecifiersList = {\r\n    /// Year\r\n    y: FormatSpecifier.createInstance({\r\n      code: 'y',\r\n      toDateName: 'year',\r\n      toValueFn: date => (date.getFullYear() % 10).toString(),\r\n    }),\r\n    yy: FormatSpecifier.createInstance({\r\n      code: 'yy',\r\n      toDateName: 'year',\r\n      toValueFn: date => addZeroPrefix(date.getFullYear() % 100, 2),\r\n    }),\r\n    yyy: FormatSpecifier.createInstance({\r\n      code: 'yyy',\r\n      toDateName: 'year',\r\n      toValueFn: date => addZeroPrefix(date.getFullYear() % 1000, 3),\r\n    }),\r\n    yyyy: FormatSpecifier.createInstance({\r\n      code: 'yyyy',\r\n      toDateName: 'year',\r\n      toValueFn: date => addZeroPrefix(date.getFullYear(), 4),\r\n    }),\r\n    yyyyy: FormatSpecifier.createInstance({\r\n      code: 'yyyyy',\r\n      toDateName: 'year',\r\n      toValueFn: date => addZeroPrefix(date.getFullYear(), 5),\r\n    }),\r\n\r\n    /// Month\r\n    M: FormatSpecifier.createInstance({\r\n      code: 'M',\r\n      toValueFn: date => (date.getMonth() + 1).toString(),\r\n    }),\r\n    MM: FormatSpecifier.createInstance({\r\n      code: 'MM',\r\n      toDateName: 'month',\r\n      toValueFn: date => addZeroPrefix(date.getMonth() + 1, 2),\r\n    }),\r\n\r\n    /// Day\r\n    d: FormatSpecifier.createInstance({\r\n      code: 'd',\r\n      toValueFn: date => date.getDate().toString(),\r\n    }),\r\n    dd: FormatSpecifier.createInstance({\r\n      code: 'dd',\r\n      toDateName: 'day',\r\n      toValueFn: date => addZeroPrefix(date.getDate(), 2),\r\n    }),\r\n\r\n    /// Hour\r\n    h: FormatSpecifier.createInstance({\r\n      code: 'h',\r\n      toValueFn: date => (date.getHours() % 12 || 12).toString(),\r\n    }),\r\n    hh: FormatSpecifier.createInstance({\r\n      code: 'hh',\r\n      toDateName: 'hour',\r\n      toValueFn: date => addZeroPrefix(date.getHours() % 12 || 12, 2),\r\n    }),\r\n    H: FormatSpecifier.createInstance({\r\n      code: 'H',\r\n      toValueFn: date => date.getHours().toString(),\r\n    }),\r\n    HH: FormatSpecifier.createInstance({\r\n      code: 'HH',\r\n      toDateName: 'hour',\r\n      toValueFn: date => addZeroPrefix(date.getHours(), 2),\r\n    }),\r\n    t: FormatSpecifier.createInstance({\r\n      code: 't',\r\n      toDateFn: (value: string) => ({ isAfterNoon: value === 'P' }),\r\n      toValueFn: date => (date.getHours() === 0 || date.getHours() < 12 ? 'A' : 'P'),\r\n    }),\r\n    tt: FormatSpecifier.createInstance({\r\n      code: 'tt',\r\n      toDateFn: (value: string) => ({ isAfterNoon: value === 'PM' }),\r\n      toValueFn: date => (date.getHours() === 0 || date.getHours() < 12 ? 'AM' : 'PM'),\r\n    }),\r\n\r\n    /// Minute\r\n    m: FormatSpecifier.createInstance({\r\n      code: 'm',\r\n      toValueFn: date => date.getMinutes().toString(),\r\n    }),\r\n    mm: FormatSpecifier.createInstance({\r\n      code: 'mm',\r\n      toDateName: 'minute',\r\n      toValueFn: date => addZeroPrefix(date.getMinutes(), 2),\r\n    }),\r\n\r\n    /// Second\r\n    s: FormatSpecifier.createInstance({\r\n      code: 's',\r\n      toValueFn: date => date.getSeconds().toString(),\r\n    }),\r\n    ss: FormatSpecifier.createInstance({\r\n      code: 'ss',\r\n      toDateName: 'second',\r\n      toValueFn: date => addZeroPrefix(date.getSeconds(), 2),\r\n    }),\r\n\r\n    /// Millisecond\r\n    f: FormatSpecifier.createInstance({\r\n      code: 'f',\r\n      toDateFn: (value: string) => ({ millisecond: parseInt(value, 10) * 100 }),\r\n      toValueFn: date => Math.floor(date.getMilliseconds() / 100).toString(),\r\n    }),\r\n    ff: FormatSpecifier.createInstance({\r\n      code: 'ff',\r\n      toDateFn: (value: string) => ({ millisecond: parseInt(value, 10) * 10 }),\r\n      toValueFn: date => addZeroPrefix(Math.floor(date.getMilliseconds() / 10), 2),\r\n    }),\r\n    fff: FormatSpecifier.createInstance({\r\n      code: 'fff',\r\n      toDateName: 'millisecond',\r\n      toValueFn: date => addZeroPrefix(date.getMilliseconds(), 3),\r\n    }),\r\n  };\r\n\r\n  /**\r\n   * Checks if there is a specifier with given code.\r\n   *\r\n   * @param code: string\r\n   * @returns {boolean}\r\n   */\r\n  static has(code: string): boolean {\r\n    return FormatSpecifiers.specifiers.hasOwnProperty(code);\r\n  }\r\n\r\n  /**\r\n   * Returns FormatSpecifier with given code.\r\n   *\r\n   * @param code: string\r\n   * @returns {FormatSpecifier}\r\n   */\r\n  static get(code: string): FormatSpecifier {\r\n    return FormatSpecifiers.specifiers[code];\r\n  }\r\n\r\n  /**\r\n   * Returns all FormatSpecifiers.\r\n   *\r\n   * @returns {IFormatSpecifiersList}\r\n   */\r\n  static getAll(): IFormatSpecifiersList {\r\n    return FormatSpecifiers.specifiers;\r\n  }\r\n}\r\n","import { msInTimeUnits, relativeFloor } from './utils';\r\n\r\n/**\r\n * TimeSpan class\r\n *\r\n * Represents a time interval.\r\n */\r\nexport class TimeSpan {\r\n  private _days: number;\r\n  private _hours: number;\r\n  private _minutes: number;\r\n  private _seconds: number;\r\n  private _milliseconds: number;\r\n  private _totalDays: number;\r\n  private _totalHours: number;\r\n  private _totalMinutes: number;\r\n  private _totalSeconds: number;\r\n  private _totalMilliseconds: number;\r\n\r\n  constructor(milliseconds: number);\r\n  constructor(hours: number, minutes: number, seconds: number);\r\n  constructor(days: number, hours: number, minutes: number, seconds: number, milliseconds?: number);\r\n  constructor(a: number, b?: number, c?: number, d?: number, e?: number) {\r\n    if (b === undefined || c === undefined) {\r\n      this._totalMilliseconds = a;\r\n    } else if (d === undefined) {\r\n      this._totalMilliseconds = a * msInTimeUnits.hour + b * msInTimeUnits.minute + c * msInTimeUnits.second;\r\n    } else {\r\n      this._totalMilliseconds =\r\n        a * msInTimeUnits.day + b * msInTimeUnits.hour + c * msInTimeUnits.minute + d * msInTimeUnits.second + (e || 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the days component of the time interval represented by the current TimeSpan structure.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get days(): number {\r\n    return this._days || (this._days = relativeFloor(this._totalMilliseconds / msInTimeUnits.day));\r\n  }\r\n\r\n  /**\r\n   * Returns the hours component of the time interval represented by the current TimeSpan structure.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get hours(): number {\r\n    return this._hours || (this._hours = relativeFloor((this._totalMilliseconds / msInTimeUnits.hour) % 24));\r\n  }\r\n\r\n  /**\r\n   * Returns the minutes component of the time interval represented by the current TimeSpan structure.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get minutes(): number {\r\n    return this._minutes || (this._minutes = relativeFloor((this._totalMilliseconds / msInTimeUnits.minute) % 60));\r\n  }\r\n\r\n  /**\r\n   * Returns the seconds component of the time interval represented by the current TimeSpan structure.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get seconds(): number {\r\n    return this._seconds || (this._seconds = relativeFloor((this._totalMilliseconds / msInTimeUnits.second) % 60));\r\n  }\r\n\r\n  /**\r\n   * Returns the milliseconds component of the time interval represented by the current TimeSpan structure.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get milliseconds(): number {\r\n    return this._milliseconds || (this._milliseconds = relativeFloor(this._totalMilliseconds % 1000));\r\n  }\r\n\r\n  /**\r\n   * Returns the milliseconds value of the current TimeSpan structure expressed in whole and fractional days.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get totalDays(): number {\r\n    return this._totalDays || (this._totalDays = this._totalMilliseconds / msInTimeUnits.day);\r\n  }\r\n\r\n  /**\r\n   * Returns the milliseconds value of the current TimeSpan structure expressed in whole and fractional hours.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get totalHours(): number {\r\n    return this._totalHours || (this._totalHours = this._totalMilliseconds / msInTimeUnits.hour);\r\n  }\r\n\r\n  /**\r\n   * Returns the milliseconds value of the current TimeSpan structure expressed in whole and fractional minutes.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get totalMinutes(): number {\r\n    return this._totalMinutes || (this._totalMinutes = this._totalMilliseconds / msInTimeUnits.minute);\r\n  }\r\n\r\n  /**\r\n   * Returns the milliseconds value of the current TimeSpan structure expressed in whole and fractional seconds.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get totalSeconds(): number {\r\n    return this._totalSeconds || (this._totalSeconds = this._totalMilliseconds / msInTimeUnits.second);\r\n  }\r\n\r\n  /**\r\n   * Returns the milliseconds value of the current TimeSpan structure expressed in whole and fractional milliseconds.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  get totalMilliseconds(): number {\r\n    return this._totalMilliseconds;\r\n  }\r\n}\r\n","import { FormatSpecifiers } from './format-specifiers';\r\nimport { FormatSpecifier } from './format-specifier';\r\nimport { TimeSpan } from './time-span';\r\nimport { assign, msInTimeUnits } from './utils';\r\n\r\nexport interface IFormatTraverseCallback {\r\n  (\r\n    params: {\r\n      code: string;\r\n      isSpecifier: boolean;\r\n      startAt: number;\r\n      endAt: number;\r\n    },\r\n  ): void;\r\n}\r\n\r\nexport class DateBuilderParams {\r\n  year: number = 0;\r\n  month: number = 1;\r\n  day: number = 1;\r\n  hour: number = 0;\r\n  minute: number = 0;\r\n  second: number = 0;\r\n  millisecond: number = 0;\r\n  isAfterNoon: boolean = false;\r\n}\r\n\r\n/**\r\n * DateTime class\r\n */\r\nexport class DateTime {\r\n  /**\r\n   * Converts the value of the given Date object to its equivalent string representation using the specified format.\r\n   *\r\n   * @param date: Date\r\n   * @param format: string\r\n   * @returns {string}\r\n   */\r\n  static format(date: Date, format: string): string {\r\n    let result: string = '';\r\n\r\n    this.traverseFormat(format, traverseParams => {\r\n      result += traverseParams.isSpecifier\r\n        ? FormatSpecifiers.get(traverseParams.code).toValueFn(date)\r\n        : traverseParams.code;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Converts the specified string representation of a date and time to its Date equivalent using the specified format.\r\n   *\r\n   * @param datetime: string\r\n   * @param format: string\r\n   * @returns {Date}\r\n   */\r\n  static parseExact(datetime: string, format: string): Date {\r\n    const dateBuilderParams: DateBuilderParams = new DateBuilderParams();\r\n    let formatSpecifier: FormatSpecifier;\r\n    let specifierTimeValue: string;\r\n\r\n    DateTime.traverseFormat(format, traverseParams => {\r\n      if (traverseParams.isSpecifier) {\r\n        formatSpecifier = FormatSpecifiers.get(traverseParams.code);\r\n\r\n        if (formatSpecifier.hasReverseAbility) {\r\n          specifierTimeValue = datetime.substring(traverseParams.startAt, traverseParams.endAt);\r\n          assign(dateBuilderParams, formatSpecifier.toDateFn(specifierTimeValue));\r\n        }\r\n      }\r\n    });\r\n\r\n    return DateTime.buildDate(dateBuilderParams);\r\n  }\r\n\r\n  /**\r\n   * Returns a new TimeSpan object based on date and time subtraction between given Date objects.\r\n   *\r\n   * @param date1: Date\r\n   * @param date2: Date\r\n   * @returns {TimeSpan}\r\n   */\r\n  static subtract(date1: Date, date2: Date = new Date()): TimeSpan {\r\n    return new TimeSpan(date1.getTime() - date2.getTime());\r\n  }\r\n\r\n  /**\r\n   * Returns a new TimeSpan object based on date subtraction between given Date objects.\r\n   *\r\n   * @param date1: Date\r\n   * @param date2: Date\r\n   * @returns {TimeSpan}\r\n   */\r\n  static subtractDate(date1: Date, date2: Date = new Date()): TimeSpan {\r\n    const date1Milliseconds: number =\r\n      date1.getTime() -\r\n      date1.getHours() * msInTimeUnits.hour -\r\n      date1.getMinutes() * msInTimeUnits.minute -\r\n      date1.getSeconds() * msInTimeUnits.second -\r\n      date1.getMilliseconds();\r\n    const date2Milliseconds: number =\r\n      date2.getTime() -\r\n      date2.getHours() * msInTimeUnits.hour -\r\n      date2.getMinutes() * msInTimeUnits.minute -\r\n      date2.getSeconds() * msInTimeUnits.second -\r\n      date2.getMilliseconds();\r\n\r\n    return new TimeSpan(date1Milliseconds - date2Milliseconds);\r\n  }\r\n\r\n  /**\r\n   * Returns a new Date object based od DateBuilderParams object.\r\n   *\r\n   * @param params: DateBuilderParams\r\n   * @returns {Date}\r\n   */\r\n  private static buildDate(params: DateBuilderParams): Date {\r\n    const allParams: DateBuilderParams = assign(new DateBuilderParams(), params);\r\n\r\n    if (allParams.isAfterNoon) {\r\n      allParams.hour += allParams.hour < 12 ? 12 : 0;\r\n    }\r\n\r\n    return new Date(\r\n      allParams.year,\r\n      allParams.month - 1,\r\n      allParams.day,\r\n      allParams.hour,\r\n      allParams.minute,\r\n      allParams.second,\r\n      allParams.millisecond,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Traverse given date format and trigger callback function for every format specifier from FormatSpecifiers or for\r\n   * single, unfamiliar letter.\r\n   *\r\n   * @param format: string\r\n   * @param callback: IFormatTraverseCallback\r\n   */\r\n  private static traverseFormat(format: string, callback: IFormatTraverseCallback): void {\r\n    let currentSpecifier: string;\r\n    let nextLetter: string;\r\n    let buffer: string = '';\r\n\r\n    for (let i: number = 0; i < format.length; i++) {\r\n      currentSpecifier = buffer + format[i];\r\n      nextLetter = format[i + 1];\r\n\r\n      if (nextLetter && FormatSpecifiers.has(currentSpecifier + nextLetter)) {\r\n        buffer += format[i];\r\n        continue;\r\n      }\r\n\r\n      callback({\r\n        code: currentSpecifier,\r\n        isSpecifier: FormatSpecifiers.has(currentSpecifier),\r\n        startAt: i - currentSpecifier.length + 1,\r\n        endAt: i + currentSpecifier.length,\r\n      });\r\n      buffer = '';\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}